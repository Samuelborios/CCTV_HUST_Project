---
import BaseLayout from "../layouts/BaseLayout.astro";
import { supabase } from "../lib/supabase";

const accessToken = Astro.cookies.get("sb-access-token");
const refreshToken = Astro.cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return Astro.redirect("/");
}

let session;
try {
  session = await supabase.auth.setSession({
    refresh_token: refreshToken.value,
    access_token: accessToken.value,
  });
  if (session.error) {
    Astro.cookies.delete("sb-access-token", {path: "/",});
    Astro.cookies.delete("sb-refresh-token", {path: "/",});
    return Astro.redirect("/");
  }
} catch (error) {
  Astro.cookies.delete("sb-access-token", {
    path: "/",
  });
  Astro.cookies.delete("sb-refresh-token", {
    path: "/",
  });
  return Astro.redirect("/");
 }
---
<BaseLayout>
  
  <h1>Dashboard </h1>

  <h2>Cameras</h2>
  <ul id="cam-list" style="list-style: none; padding-left: 0;"></ul>
  <br>
  <h2>Scan active cameras</h2>
  <form id="scan-form">
    <div class="input-line">
      <div class="input-group">
        <label>Username</label>
        <input type="text" id="username" value="admin" class="my-input" required>
      </div>
      <div class="input-group">
        <label>Password</label>
        <input type="password" id="password" value="" class="my-input" required>
      </div>
      
      <div class="align-right">
        <div class="input-group">
          <button id="scan-button" type="submit" class="outline">Scan cameras</button>
        </div>
      </div>
    </div>
  </form> 

  <script type="module">

    function showToast(message, isError = false) {
      const toast = document.getElementById('toast');
      toast.textContent = message;
      toast.style.background = isError ? '#c0392b' : '#27ae60';
      toast.classList.add('show');

      setTimeout(() => {
        toast.classList.remove('show');
      }, 3000);
    }

    async function fetchCameras(recentScanResults = []) {
      const res = await fetch('/api/list-camDB');
      const data = await res.json();

      const list = document.getElementById('cam-list');
      list.innerHTML = '';

      if (data.error) {
        list.innerHTML = '<li style="color: red;">Fetching error</li>';
        return;
      }
      if (!data.cameras || data.cameras.length === 0) {
        list.innerHTML = '<li>No cameras found</li>';
        return;
      }

      data.cameras.forEach(camera => {
        const li = document.createElement('li');
        li.style.marginBottom = '1em';
        li.style.cursor = 'pointer';

        const summary = document.createElement('div');
        summary.style.fontWeight = 'bold';
        summary.style.display = 'flex';
        summary.style.alignItems = 'center';
        summary.style.gap = '0.5em';

        const arrow = document.createElement('span');
        arrow.textContent = '▼';

        const status = document.createElement('span');

        const follow = document.createElement('button');
        follow.textContent = 'Go to'
        follow.classList.add('active-outline');
        follow.style.marginLeft = 'auto'; 
        follow.addEventListener('click', (e) => {
          e.stopPropagation(); // prevent toggle
          e.preventDefault();
          window.location.href = `/cam_dashboard?ip=${encodeURIComponent(camera.ip)}&port=${encodeURIComponent(camera.port)}`;
        });

        const ipSpan = document.createElement('test');
        ipSpan.textContent = camera.ip;
        ipSpan.style.padding = '0.15rem 1rem';

        const isActive = recentScanResults.some(scan => scan.ip === camera.ip && scan.info?.serialNumber === camera.serial);
        if (isActive) {
          ipSpan.classList.add('active-outline');
          status.textContent = 'Connected';
        } else {
          ipSpan.classList.add('outline');
          status.textContent = 'Previously connected';
        }        

        summary.appendChild(arrow);
        summary.appendChild(ipSpan);
        summary.appendChild(status);

        if (isActive) summary.appendChild(follow);

        const details = document.createElement('div');
        details.style.display = 'none';
        details.style.paddingLeft = '1em';
        details.innerHTML = `
          <div class="input-line">
            <div class="input-group">
              <p><strong>Port:</strong> ${camera.port || '-'}</p>
              <p><strong>Model:</strong> ${camera.model || '-'}</p>
              <p><strong>Manufacturer:</strong> ${camera.manufacturer || '-'}</p>
            </div>
            <div class="input-group">
              <p><strong>Firmware:</strong> ${camera.firmware || '-'}</p>
              <p><strong>Serial:</strong> ${camera.serial || '-'}</p>
            </div>
          </div>
        `;

        summary.addEventListener('click', () => {
          const isOpen = details.style.display === 'block';
          details.style.display = isOpen ? 'none' : 'block';
          arrow.textContent = isOpen ? '▼' : '▲';
        });

        li.appendChild(summary);
        li.appendChild(details);
        list.appendChild(li);
      });
    }


    document.getElementById('scan-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const username = document.getElementById('username').value;
      const password = document.getElementById('password').value;
      const scanButton = document.getElementById('scan-button');

      scanButton.textContent = 'Scanning...';

      try {
        const resScan = await fetch('/api/scan', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ username, password }),
        });
        const data = await resScan.json();
        await fetchCameras(data.cameras);

        scanButton.textContent = 'Scan cameras';
        showToast('Scan done ✔', false);
        // output.textContent = JSON.stringify(data.cameras, null, 2);
      } catch (err) {
        scanButton.textContent = 'Scan cameras';
        showToast('Error: '+err, true);
      }
    });

    fetchCameras();
  </script>

  <div id="toast" class="toast"></div>
</BaseLayout>
---
import BaseLayout from "../layouts/BaseLayout.astro";
import { supabase } from "../lib/supabase";

const accessToken = Astro.cookies.get("sb-access-token");
const refreshToken = Astro.cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return Astro.redirect("/");
}

// Set Supabase session
const { data: session, error: sessionError } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

if (sessionError || !session.session) {
  Astro.cookies.delete("sb-access-token", { path: "/" });
  Astro.cookies.delete("sb-refresh-token", { path: "/" });
  return Astro.redirect("/");
}

const url = new URL(Astro.request.url);
const ip = url.searchParams.get("ip") ?? "Unknown IP";
---

<BaseLayout>
  <h1>Camera : <strong>{ip}</strong></h1>

  <h2>Live stream :</h2>

  <div>
    <button id="add-stream-button" class="outline">New camera ? Add it to the stream list</button>
    <form id="add-stream-form" style="display:none">
      <div class="input-line">
        <div class="input-group">
          <label>Username</label>
          <input type="text" id="username" value="admin" class="my-input" required>
        </div>
        <div class="input-group">
          <label>Password</label>
          <input type="password" id="password" value="" class="my-input" required>
        </div>
        
        <div class="align-right">
          <div class="input-group">
            <button id="add-button" type="submit" class="button-add">Add stream</button>
          </div>
        </div>
      </div>
    </form>
  </div>

  
  <br/>

  <video id="video" autoplay muted controls playsinline style="width: 100%; height: auto; margin-bottom: 1rem;"></video>

  <div class="align-right">
    <button id="settings-button" class="outline"> Settings </button>
  </div>
  <div class="align-right">
    <button id="test-button" class="outline">test</button>
  </div>
  <div class="align-right">
    <button id="restart-docker-button" class="outline">Restart stream server</button>
  </div>

  <script type="module">

    document.getElementById("restart-docker-button").addEventListener("click", async () => {
      const res = await fetch('/api/restart-stream-server', {
        method: 'POST'
      });
      const result = await res.json();
      if (result.success) {
        showToast(result.message);
      }
      setTimeout(() => {location.reload();}, 2000);
    });

    document.getElementById("settings-button").addEventListener("click", () => {
      const params = new URLSearchParams(window.location.search);
      const ip = params.get("ip");
      const port = params.get("port");
      if (ip) {
        window.location.href = `/cam_settings?ip=${encodeURIComponent(ip)}&port=${encodeURIComponent(port)}`;
      } else {
        alert("IP not found in current URL.");
      }
    });

    document.getElementById("test-button").addEventListener("click", () => {
      setTimeout(() => {location.reload();}, 3000);
    });

    let streamFormVisible = false;
    document.getElementById('add-stream-button').onclick = async () => {
      const form = document.getElementById('add-stream-form');
      streamFormVisible = !streamFormVisible;
      form.style.display = streamFormVisible ? '' : 'none';
      if (!streamFormVisible) return;
    };

    document.getElementById('add-stream-form').onsubmit = async (e) => {
      e.preventDefault();
      const res = await fetch('/api/add-stream', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: username.value,
          pwd: password.value
        }),
      });
      const result = await res.json();
      if (res.ok && result.message) {
        showToast('ok'+result.message);
      } else {
        showToast('notok'+result.error || "Failed to save config", true);
      }
    };

    function showToast(message, isError = false) {
      const toast = document.getElementById('toast');
      toast.textContent = message;
      toast.style.background = isError ? '#c0392b' : '#27ae60';
      toast.classList.add('show');

      setTimeout(() => {
        toast.classList.remove('show');
      }, 3000);
    }
  </script>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const video = document.getElementById("video");
      if (!(video instanceof HTMLVideoElement)) {
        console.error("Video element not found or incorrect type");
        return;
      }
  
      const mse = new MediaSource();
      video.src = URL.createObjectURL(mse);
      video.onerror = () => {
        console.error("Video error:", video.error);
      };
  
      mse.addEventListener("sourceopen", () => {
        const mimeCodec = 'video/mp4; codecs="avc1.640033"';
        
        if (!MediaSource.isTypeSupported(mimeCodec)) {
          console.error("Unsupported MIME type or codec:", mimeCodec);
          return;
        }
        
        const sourceBuffer = mse.addSourceBuffer(mimeCodec);
        let queue: ArrayBuffer[] = [];

        const params = new URLSearchParams(window.location.search);
        const ip = params.get("ip");
          let stream_name = "";
        if (ip) {
          stream_name = "stream"+ip;
        } else {
          alert("IP not found in current URL.");
        }
        let url = "wss://192.168.50.182/stream/"+stream_name+"/channel/0/mse?uuid="+stream_name+"&channel=0"
  
        const ws = new WebSocket(url);
        ws.binaryType = "arraybuffer";
  
        ws.onmessage = (event) => {
          if (event.data.byteLength < 100) {
            console.warn("Skipping small chunk of size:", event.data.byteLength);
            return;
          }
          if (sourceBuffer.updating || queue.length > 0) {
            queue.push(event.data);
          } else {
            try {
              sourceBuffer.appendBuffer(event.data);
            } catch (e) {
              console.error("appendBuffer failed", e);
            }
          }
        };
  
        sourceBuffer.addEventListener("updateend", () => {
          if (queue.length > 0 && !sourceBuffer.updating) {
            const next = queue.shift();
            if (next) {
              try {
                sourceBuffer.appendBuffer(next);
              } catch (e) {
                console.error("appendBuffer failed while processing queue", e);
              }
            }
          }
  
          if (video.readyState >= 3) {
            video.play().catch(e => console.warn("Playback error:", e));
          }
        });
  
        sourceBuffer.addEventListener("error", (e) => {
          console.error("SourceBuffer error:", e);
        });
  
        ws.onopen = () => console.log("WebSocket connected");
        ws.onerror = (err) => console.error("WebSocket error:", err);
        ws.onclose = () => console.log("WebSocket closed");
      });
    });
  </script>
  <div id="toast" class="toast"></div>
</BaseLayout>
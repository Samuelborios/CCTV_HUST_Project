---
import BaseLayout from "../layouts/BaseLayout.astro";
import { supabase } from "../lib/supabase";

const accessToken = Astro.cookies.get("sb-access-token");
const refreshToken = Astro.cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return Astro.redirect("/");
}

// Set Supabase session
const { data: session, error: sessionError } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

if (sessionError || !session.session) {
  Astro.cookies.delete("sb-access-token", { path: "/" });
  Astro.cookies.delete("sb-refresh-token", { path: "/" });
  return Astro.redirect("/");
}

const url = new URL(Astro.request.url);
const ip = url.searchParams.get("ip") ?? "Unknown IP";
---

<BaseLayout>
  <h1>Camera settings</h1>

  <h2>For any change in the settings :</h2>
  
  <div class="input-line">
    <div class="input-group">
      <label>Username</label>
      <input type="text" id="username" value="admin" class="my-input" required>
    </div>
    <div class="input-group">
      <label>Password</label>
      <input type="password" id="password" value="" class="my-input" required>
    </div>
  </div>

  <h2>Existing users of camera : <strong><label>{ip}</label></strong></h2>
  <ul id="user-list" style="list-style: none; padding-left: 0;"></ul>
  <div class="align-right">
    <div class="input-group">
      <button type="submit" id="refresh-button" class="outline">Refresh list</button>
    </div>
  </div>

  <h2>Would you like to add another user ?</h2>
  
  <form id="add-user-form" class="input-line">
    <div class="input-group">
      <label>Group</label>
      <select name="group" class="my-select">
        <option value="user">user</option>
        <option value="admin">admin</option>
      </select>
    </div>
    <div class="input-group">
      <label for="memo">Memo (optional)</label>
      <input name="memo" class="my-input" />
    </div>
    <div class="input-line">
      <div class="input-group">
        <label>Username</label>
        <input name="username" class="my-input" required />
      </div>
      <div class="input-group">
        <label>Password</label>
        <input type="password" name="password" class="my-input" required />
      </div>
    </div>
    <div class="align-right">
      <div class="input-group">
        <button type="submit" class="button-add">Add user</button>
      </div>
    </div>
  </form>

  <h2>Other settings :</h2>

  <div id="video-settings">
    <button id="load-video-config" class="outline">Video Config</button>
    <form id="video-config-form" style="display:none; margin-top:1em;">
      <div class="input-group">
        <label>Bitrate (Kbps)</label>
        <input type="number" name="BitRate" id="bitrate-input" step="1" required />
      </div>
      <div class="input-group">
        <label>Compression</label>
        <select name="Compression" id="compression-options"></select>
      </div>
      <div class="input-group">
        <label>FPS</label>
        <input type="number" name="FPS" id="fps-input" min="0.2" max="30" step="0.1" required />
      </div>
      <div class="input-group">
        <label>Resolution</label>
        <select name="Resolution" id="resolution-options"></select>
      </div>
      <div class="align-right">
        <button type="submit" class="button-add">Save Video Settings</button>
      </div>
    </form>
  </div>

  <div class="align-right">
    <button id="reboot-button" class="outline"> Reboot </button>
  </div>


  <script type="module">
    let videoFormVisible = false;
    let configCaps = null;
    document.getElementById('load-video-config').onclick = async () => {
      const form = document.getElementById('video-config-form');
      videoFormVisible = !videoFormVisible;
      form.style.display = videoFormVisible ? '' : 'none';
      if (!videoFormVisible) return;

      const params = new URLSearchParams(window.location.search);
      const ip = params.get("ip");
      const port = params.get("port");
      if (!ip) {
        showToast("IP not found in URL", true);
        return;
      }
      const payload = {
        ip,
        port,
        uname: username.value,
        pwd: password.value
      };

      // Fetch config caps if not already loaded
      if (!configCaps) {
        const capsRes = await fetch('/api/get-video-config-caps', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload),
        });
        configCaps = await capsRes.json();
        if (capsRes.ok && !configCaps.error) {
          populateVideoCaps(configCaps);
        } else {
          showToast(configCaps.error || "Failed to load caps", true);
          return;
        }
      }

      // Fetch current config
      const res = await fetch('/api/get-video-config', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      const data = await res.json();
      if (!res.ok || data.error) {
        showToast(data.error || "Failed to load config", true);
        return;
      }
      // Populate form fields
      document.getElementById('bitrate-input').value = data.BitRate || '';
      document.getElementById('compression-options').value = data.Compression || 'H.264';
      document.getElementById('fps-input').value = data.FPS || '';
      document.getElementById('resolution-options').value = `${data.Width}x${data.Height}`;
    };

    function populateVideoCaps(caps) {
      // Bitrate
      const bitrateInput = document.getElementById('bitrate-input');
      bitrateInput.min = caps.BitRateMin || 3;
      bitrateInput.max = caps.BitRateMax || 10000;
      bitrateInput.step = 1;
      // Compression
      const compSel = document.getElementById('compression-options');
      compSel.innerHTML = '';
      (caps.CompressionTypes || ['H.264', 'MJPG']).forEach(opt => {
        const o = document.createElement('option');
        o.value = opt;
        o.textContent = opt;
        compSel.appendChild(o);
      });
      // Resolution
      const resSel = document.getElementById('resolution-options');
      resSel.innerHTML = ''; 
      (caps.ResolutionTypes || []).forEach(opt => {
        const o = document.createElement('option');
        o.value = opt.replace(/\s/g, '');
        o.textContent = opt;
        resSel.appendChild(o);
      });
      // FPS
      document.getElementById('fps-input').max = caps.FPSMax || 25;
    }

    // Save handler
    document.getElementById('video-config-form').onsubmit = async (e) => {
      e.preventDefault();
      const params = new URLSearchParams(window.location.search);
      const ip = params.get("ip");
      const port = params.get("port");
      if (!ip) {
        showToast("IP not found in URL", true);
        return;
      }
      const form = e.target;
      const [Width, Height] = form.Resolution.value.split('x');
      const payload = {
        ip,
        port,
        uname: username.value,
        pwd: password.value,
        BitRate: form.BitRate.value,
        Compression: form.Compression.value,
        FPS: form.FPS.value,
        Width,
        Height,
      };
      const res = await fetch('/api/set-video-config', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      const data = await res.json();
      if (res.ok && data.message) {
        showToast(data.message);
      } else {
        showToast(data.error || "Failed to save config", true);
      }
    };

    document.getElementById('reboot-button').addEventListener('click', async () => {
      const btn = document.getElementById('reboot-button');
      btn.disabled = true;
      btn.textContent = 'Rebooting...';
      
      const params = new URLSearchParams(window.location.search);
      const ip = params.get("ip");
      const port = params.get("port");
      const payload = {
        ip,
        port,
        uname: username.value,
        pwd: password.value
      };
      if (ip) {
        try {
          const res = await fetch('/api/reboot', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload),
          });
          const data = await res.json();

          if (res.ok) {
            showToast(data.message || 'Camera rebooted!');
          } else {
            showToast(data.error || 'Reboot failed', true);
          }
        } catch (err) {
          showToast('Network error', true);
        } finally {
          btn.disabled = false;
          btn.textContent = 'Reboot';
        }
      } else {
        showToast("IP not found in current URL.");
        btn.disabled = false;
        btn.textContent = 'Reboot';
      }
    });

    document.getElementById('refresh-button').addEventListener('click', async () => {
      const btn = document.getElementById('refresh-button');
      btn.disabled = true;
      btn.textContent = 'Refreshing...';
      try {
        fetchUsers();
      } catch (err) {
        showToast('Network error', true);
      } finally {
        btn.disabled = false;
        btn.textContent = 'Refresh list';
      }
    });


    function showToast(message, isError = false) {
      const toast = document.getElementById('toast');
      toast.textContent = message;
      toast.style.background = isError ? '#c0392b' : '#27ae60';
      toast.classList.add('show');

      setTimeout(() => {
        toast.classList.remove('show');
      }, 3000);
    }

    async function fetchUsers() {
      const params = new URLSearchParams(window.location.search);
      const ip = params.get("ip");
      const payload = {
        ip,
        uname: username.value,
        pwd: password.value
      };
      const res = await fetch('/api/list-users', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      const data = await res.json();

      const list = document.getElementById('user-list');
      list.innerHTML = '';
      if (data.error) {
        list.innerHTML = '<li style="color: red;">Fetching error</li>';
        return;
      }
      if (data.users.length === 0) {
        list.innerHTML = '<li>No user found</li>';
        return;
      }

      data.users.forEach(user => {
        const li = document.createElement('li');
        li.style.marginBottom = '1em';
        li.style.cursor = 'pointer';

        const summary = document.createElement('div');
        summary.style.fontWeight = 'bold';
        summary.style.display = 'flex';
        summary.style.alignItems = 'center';
        summary.style.gap = '0.5em';

        const arrow = document.createElement('span');
        arrow.textContent = '▼';

        const nameSpan = document.createElement('span');
        nameSpan.textContent = user.name;
        nameSpan.style.fontWeight = 'bold';
        nameSpan.classList.add('outline');

        summary.appendChild(arrow);
        summary.appendChild(nameSpan);

        const details = document.createElement('div');
        details.style.display = 'none';
        details.style.paddingLeft = '1em';
        details.innerHTML = `
          <div class="input-group">
            <p><strong>Group: </strong>${user.group || '-'}</p>
            <p><strong>Memo: </strong>${user.memo || '-'}</p>
            <div class="align-right">
              <button style=submit class="outline button-modify-pwd">Change password</button>
              <button style=submit class=button-del>Delete user</button>
            </div>
          </div>
        `;

        summary.addEventListener('click', () => {
          const isOpen = details.style.display === 'block';
          details.style.display = isOpen ? 'none' : 'block';
          arrow.textContent = isOpen ? '▼' : '▲';
        });

        const deleteBtn = details.querySelector('.button-del');
        deleteBtn.addEventListener('click', async (e) => {
          e.stopPropagation(); // prevent toggle
          const newPayload = {
            userName: user.name.trim(),
            ip,
            admin_userName: username.value,
            pwd: password.value
          };
          const confirmed = confirm(`You want to delete the user : "${user.name.trim()}" ?`);
          if (!confirmed) return;

          const res = await fetch('/api/delete-user', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(newPayload),
          });

          const text = await res.text();
          if (res.ok) {
            showToast(text, !res.ok);
            await fetchUsers(); // Refresh user list
          } else {
            showToast('Error: '+text, !res.ok);
          }
        });

        const pwdBtn = details.querySelector('.button-modify-pwd');
        pwdBtn.addEventListener('click', (e) => {
          e.stopPropagation();
          openPwdModal(user);
        });


        li.appendChild(summary);
        li.appendChild(details);
        list.appendChild(li);
      });
    }

    document.querySelector('#add-user-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const form = e.target;
      const formData = new FormData(form);
      const payload = Object.fromEntries(formData.entries());

      payload.ip = new URLSearchParams(window.location.search).get("ip");
      payload.admin_userName = username.value;
      payload.admin_password = password.value;

      const res = await fetch('/api/add-user', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      const text = await res.text();
      if (res.ok) {
        showToast(text, !res.ok);
        form.reset();
        await fetchUsers(); // Refresh user list
      } else {
        showToast('Error: '+text, !res.ok);
      }
    });

    function openPwdModal(user) {
      const modal = document.getElementById('pwd-modal');
      const form = document.getElementById('pwd-form');
      form.username.value = user.name;
      form.oldPwd.value = '';
      form.newPwd.value = '';
      modal.style.display = 'flex';
    }

    document.getElementById('close-pwd-modal').onclick = () => {
      document.getElementById('pwd-modal').style.display = 'none';
    };

    window.onclick = function(event) {
      const modal = document.getElementById('pwd-modal');
      if (event.target === modal) modal.style.display = 'none';
    };

    document.getElementById('pwd-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const form = e.target;
      const userName = form.username.value.trim();
      const oldPwd = form.oldPwd.value.trim();
      const newPwd = form.newPwd.value.trim();
      if (!username || !oldPwd || !newPwd) {
        showToast('All fields are required', true);
        return;
      }
      const res = await fetch('/api/modify-password', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: userName,
          pwdOld: oldPwd,
          pwd: newPwd,
          ip: new URLSearchParams(window.location.search).get("ip"),
          admin_userName: username.value,
          admin_password: password.value
        }),
      });
      const text = await res.text();
      if (res.ok && text.trim() === 'OK') {
        showToast('Password changed successfully');
        document.getElementById('pwd-modal').style.display = 'none';
      } else {
        showToast('Error: ' + text, true);
      }
    });

    // Initial load
    fetchUsers();
  </script>

  <div id="toast" class="toast"></div>

  <div id="pwd-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <span id="close-pwd-modal" class="close">&times;</span>
      <h2>Change Password</h2>
      <form id="pwd-form" class="input-line">
        <input type="hidden" name="username" />
        <div class="input-group">
          <label>Old Password</label>
          <input type="password" name="oldPwd" class="my-input" required />
        </div>
        <div class="input-group">
          <label>New Password</label>
          <input type="password" name="newPwd" class="my-input" required />
        </div>
        <div class="input-group">
          <div class="align-right">
            <button type="submit" class="button-add">Change Password</button>
          </div>
        </div>
      </form>
    </div>
  </div>
</BaseLayout>

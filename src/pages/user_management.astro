---
import BaseLayout from "../layouts/BaseLayout.astro";
import { supabase } from "../lib/supabase";

const accessToken = Astro.cookies.get("sb-access-token");
const refreshToken = Astro.cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return Astro.redirect("/signin");
}

// Set Supabase session
const { data: session, error: sessionError } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

if (sessionError || !session.session) {
  Astro.cookies.delete("sb-access-token", { path: "/" });
  Astro.cookies.delete("sb-refresh-token", { path: "/" });
  return Astro.redirect("/signin");
}

const userEmail = session.session.user?.email ?? "Utilisateur";

---

<BaseLayout>
  <h1>Manage Dahua users</h1>

  <h2>Existing users</h2>
  <ul id="user-list" style="list-style: none; padding-left: 0;"></ul>

  <h2>Would you like to add another user ?</h2>
  
  <form id="add-user-form" class="input-line">

    <div class="input-group">
      <label>Group</label>
      <select name="group" class="my-select">
        <option value="user">user</option>
        <option value="admin">admin</option>
      </select>
    </div>

    <div class="input-group">
      <label for="memo">Memo (optional)</label>
      <input name="memo" class="my-input" />
    </div>

    <div class="input-line">
      <div class="input-group">
        <label>Username</label>
        <input name="username" class="my-input" required />
      </div>

      <div class="input-group">
        <label>Password</label>
        <input type="password" name="password" class="my-input" required />
      </div>
    </div>

    
    <div class="align-right">
      <button type="submit" class="button-add">Add user</button>
    </div>
  </form>

  

  <script type="module">

    function showToast(message, isError = false) {
      const toast = document.getElementById('toast');
      toast.textContent = message;
      toast.style.background = isError ? '#c0392b' : '#27ae60';
      toast.classList.add('show');

      setTimeout(() => {
        toast.classList.remove('show');
      }, 3000);
    }


    async function fetchUsers() {
      const res = await fetch('/api/list-users');
      const data = await res.json();

      const list = document.getElementById('user-list');
      list.innerHTML = '';

      if (data.error) {
        list.innerHTML = '<li style="color: red;">Fetching error</li>';
        return;
      }

      if (data.users.length === 0) {
        list.innerHTML = '<li>No user found</li>';
        return;
      }

      data.users.forEach(user => {
        const li = document.createElement('li');
        li.style.marginBottom = '1em';
        li.style.cursor = 'pointer';

        const summary = document.createElement('div');
        summary.style.fontWeight = 'bold';
        summary.style.display = 'flex';
        summary.style.alignItems = 'center';
        summary.style.gap = '0.5em';

        const arrow = document.createElement('span');
        arrow.textContent = '▼';

        const nameSpan = document.createElement('span');
        nameSpan.textContent = user.name;
        nameSpan.style.fontWeight = 'bold';
        nameSpan.classList.add('outline');

        summary.appendChild(arrow);
        summary.appendChild(nameSpan);

        const details = document.createElement('div');
        details.style.display = 'none';
        details.style.paddingLeft = '1em';
        details.innerHTML = `
          <div class="input-group">
            <p><strong>Group: </strong>${user.group || '-'}</p>
            <p><strong>Memo: </strong>${user.memo || '-'}</p>
            <div class="align-right">
              <button style=submit class=button-del>Delete</button>
            </div>
          </div>
        `;

        summary.addEventListener('click', () => {
          const isOpen = details.style.display === 'block';
          details.style.display = isOpen ? 'none' : 'block';
          arrow.textContent = isOpen ? '▼' : '▲';
        });

        const deleteBtn = details.querySelector('button');
        deleteBtn.addEventListener('click', async (e) => {
          e.stopPropagation(); // prevent toggle
          const confirmed = confirm(`You want to delete the user : "${user.name.trim()}" ?`);
          if (!confirmed) return;

          const res = await fetch('/api/delete-user', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userName: user.name.trim() }),
          });

          const text = await res.text();
          if (res.ok) {
            showToast(text, !res.ok);
            await fetchUsers(); // Refresh user list
          } else {
            showToast('Error: '+text, !res.ok);
          }
        });

        li.appendChild(summary);
        li.appendChild(details);
        list.appendChild(li);
      });
    }

    document.querySelector('#add-user-form').addEventListener('submit', async (e) => {
      e.preventDefault();

      const form = e.target;
      const formData = new FormData(form);
      const payload = Object.fromEntries(formData.entries());

      const res = await fetch('/api/add-user', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      const text = await res.text();
      if (res.ok) {
        showToast(text, !res.ok);
        form.reset();
        await fetchUsers(); // Refresh user list
      } else {
        showToast('Error: '+text, !res.ok);
      }
    });

    // Initial load
    fetchUsers();
  </script>
  <div id="toast" class="toast"></div>
</BaseLayout>
